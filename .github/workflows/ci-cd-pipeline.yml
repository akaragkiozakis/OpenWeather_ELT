name: 🧪 Data Quality & Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual trigger

env:
  PYTHON_VERSION: '3.10'
  
jobs:
  # ==========================================
  # JOB 1: Code Quality & Linting
  # ==========================================
  code-quality:
    name: 🔍 Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: 🎨 Code Formatting Check (Black)
      run: |
        black --check --diff .
        
    - name: 📋 Import Sorting Check (isort)
      run: |
        isort --check-only --diff .
        
    - name: 🔎 Linting (flake8)
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: 🔬 Type Checking (mypy)
      run: |
        mypy --ignore-missing-imports src/ || true

  # ==========================================  
  # JOB 2: Data Quality Tests
  # ==========================================
  data-quality-tests:
    name: 🧪 Data Quality Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        test-suite: ['bronze', 'silver', 'all']
        
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python  
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🧪 Run Bronze Layer Tests
      if: matrix.test-suite == 'bronze' || matrix.test-suite == 'all'
      run: |
        cd data_quality_tests
        python test_bronze_simple.py
        
    - name: 🧪 Run Silver Layer Tests  
      if: matrix.test-suite == 'silver' || matrix.test-suite == 'all'
      run: |
        cd data_quality_tests
        python test_silver_local.py
        
    - name: 🧪 Run All Tests
      if: matrix.test-suite == 'all'
      run: |
        cd data_quality_tests
        python run_all_tests.py
        
    - name: 📊 Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.test-suite }}
        path: |
          data_quality_tests/*.log
          data_quality_tests/test_results/

  # ==========================================
  # JOB 3: Security Scan
  # ==========================================
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔒 Run Safety Check
      run: |
        pip install safety
        safety check --json || true
        
    - name: 🔍 Run Bandit Security Scan
      run: |
        pip install bandit
        bandit -r src/ databricks/ data_quality_tests/ -f json || true

  # ==========================================
  # JOB 4: Documentation Check
  # ==========================================
  documentation:
    name: 📚 Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📖 Check README Links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/mlc_config.json'
        
    - name: 📝 Check Documentation Completeness
      run: |
        # Check if key documentation files exist
        test -f README.md || (echo "❌ README.md missing" && exit 1)
        test -f data_quality_tests/README.md || (echo "❌ Data quality README missing" && exit 1)
        test -f .gitignore || (echo "❌ .gitignore missing" && exit 1)
        echo "✅ All required documentation files present"

  # ==========================================
  # JOB 5: Build & Package Validation  
  # ==========================================
  build-validation:
    name: 🏗️ Build Validation
    runs-on: ubuntu-latest
    needs: [code-quality, data-quality-tests]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🏗️ Validate Project Structure
      run: |
        # Check critical directories exist
        test -d src/ || (echo "❌ src/ directory missing" && exit 1)
        test -d databricks/ || (echo "❌ databricks/ directory missing" && exit 1)
        test -d data_quality_tests/ || (echo "❌ data_quality_tests/ directory missing" && exit 1)
        test -d great_expectations/ || (echo "❌ great_expectations/ directory missing" && exit 1)
        echo "✅ Project structure validated"
        
    - name: 🧪 Import Test (Smoke Test)
      run: |
        # Test that main modules can be imported
        cd data_quality_tests
        python -c "import great_expectations; print('✅ Great Expectations import successful')"
        python -c "import pandas; print('✅ Pandas import successful')"
        echo "✅ All critical imports successful"

  # ==========================================
  # JOB 6: Deployment Readiness
  # ==========================================
  deployment-readiness:
    name: 🚀 Deployment Readiness
    runs-on: ubuntu-latest
    needs: [data-quality-tests, security-scan, documentation, build-validation]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: ✅ Deployment Pre-checks
      run: |
        echo "🎯 Running deployment readiness checks..."
        
        # Check version/release readiness
        if [ -f VERSION ]; then
          echo "📋 Version: $(cat VERSION)"
        fi
        
        # Validate configuration files
        test -f great_expectations/great_expectations.yml || (echo "❌ GE config missing" && exit 1)
        
        echo "✅ All deployment checks passed!"
        echo "🚀 Project is ready for deployment!"
        
    - name: 📊 Generate Deployment Summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Code quality checks passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Data quality tests passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Security scan completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Documentation validated" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Build validation successful" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Project is ready for production deployment! 🎉**" >> $GITHUB_STEP_SUMMARY

  # ==========================================
  # JOB 7: Notifications
  # ==========================================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deployment-readiness]
    if: always()
    
    steps:
    - name: 📨 Build Status Notification
      run: |
        if [ "${{ needs.deployment-readiness.result }}" == "success" ]; then
          echo "✅ Pipeline completed successfully!"
          echo "🎉 All quality gates passed - ready for deployment!"
        else
          echo "❌ Pipeline failed - check logs for details"
          echo "🔍 Review failed jobs and fix issues before deployment"
        fi